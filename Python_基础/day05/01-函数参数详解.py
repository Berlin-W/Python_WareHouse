"""
调用函数时，给函数形参传递实参有 2 种方式：
1）位置参数(按照形参的位置传递实参,不需要指定 形参的名字)：按形参的位置，从左到右，一一匹配传递参数，缺一不可
2）关键字参数(按照形参的名字传递实参,需要指定形参的字)：函数调用式，按照`形参=值`的形式进行传递，不必按照位置传递
    注意：对于同一形参不能重复传值
"""


def func1(num1, num2):
    print('num1=', num1)
    print('num2=', num2)

# 位置参数：按形参的位置，从左到右，一一匹配传递参数，缺一不可
#  按照形参的位置传参
func1(1,2)
# 按照形参的名字进行传参
func1(num2=6,num1=2)

# 关键字参数：函数调用时，按照`形参=值`的形式进行传递，不必按照位置传递


"""
缺省参数(带有默认值的形参)：
1）定义函数时，可以给形参设置默认值，设置了默认值的参数称为缺省参数，默认参数必须在普通参数的后边
2）调用函数时，如果没有给设置了默认值的形参传递实参，则使用默认值
"""


# 函数形参可以设置默认值 带有默认值的形参 称为 缺省形参 ,也可以对其进行赋值
def func2(a, b=2, c=3):
    print('a=', a)
    print('b=', b)
    print('c=', c)


# 调用func2()
func2(1)

"""
不定长参数(可以接收任意数量实参的形参)：接收任意数量的实参
1）元组不定长参数：用于接收任意数量的位置实参
2）字典不定长参数：用于接收任意数量的关键字实参
"""
a = 1
b = 2
c = 3
d = 4
print(a, b, c, d)


# 元组不定长参数：用于接收任意数量的位置实参  形参前＋* :称为元组不定长形参
def func3(*args):
    print(type(args), args)


# 元组不定长参数本质：将用户传递的位置实参，包装成了元组，放到了 args 参数中
# 这里其实是将位置形参1,3,5 包装成了元组(1,3,5),然后放到了args形参中
func3(1, 3, 5)


# 字典不定长参数：用于接收任意数量的关键字实参 (形参名前＋**) 称为 字典不定长形参
#  关键字kwargs是字典
def func4(**kwargs):
    print(type(kwargs), kwargs)


# 字典不定长参数本质：将用户传递的关键字实参，包装成了字典，放到了 kwargs 参数
# 这里将 name='smart', age=18, gender=False 这三个关键字包装成字典
# {'name': 'smart', 'age': 18, 'gender': False},将字典放到了kwargs中
func4(name='smart', age=18, gender=False)


# 注意:
# 已经存在的形参, 其对应的关键字实参 不会被包装到字典中
# 字典型可变形参必须在形参列表的最后边

"""
函数调用实参传递的形式：
1）位置传递
2）关键字传递

函数形参的综合应用：
1）普通参数：必传的
2）缺省参数：带有默认值，可以不传，不传会使用默认值
3）元组不定长参数：接收任意数量的位置实参
4）字典不定长参数：接收任意数量的关键字实参

注意：多种类型参数需要注意次序
1）普通参数，元组不定长参数，缺省参数，字典不定长参数
"""

# *args
# **kwargs

